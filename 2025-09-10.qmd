---
title: "2025-09-10"
format:
  html: default
  pdf: default
params:
  course: "mc451"
  word_min: 250
  word_max: 300
  p1: 'Think about a claim you’ve seen online that you weren’t sure was true. How would the principles of empiricism and control help you design a study to test whether it was accurate?'
  p2: 'Choose a topic you’re curious about in media or communication (e.g., the effect of streaming on movie watching, how politicians use TikTok, portrayals of families on TV). Write a specific research question about it. Then, briefly describe what you would do in each of the five stages of the research workflow (Conceptualization, Design, Data Collection, Data Analysis, Communication) to answer it.'
  p3: 'Describe a time you learned a digital tool (in any context—school, work, a hobby) without really understanding the reasoning behind what you were doing. How might knowing the "why"—the tool-agnostic principles—have helped you use it more effectively, solve problems, or even choose a better tool for the task?'
---

## Choose **one** prompt to answer

> **Prompt A:** `r params$p1`

> **Prompt B:** `r params$p2`

> **Prompt C:** `r params$p3`

---

## Response

<!-- RESPONSE-START -->
One claim I have seen online is that "drinking coffee late at night causes insomnia." While it sounds believeable, I am not sure it is completely true because most of the time I will drink coffee before bed and it helps me sleep. Therefore I would use the principles of empiricism and control to design a study to test it. Empiricism means relying on observation and measurement rather than personal opinion or assumptions. To study this claim, I would first define the different "variables" very clearly. First, "Coffee late at night" could mean drinking caffeine after 8 p.m., and "insomnia" could be measured by the hours of sleep or time it takes to fall asleep. I would collect data by having participants track their caffeine intake and their sleep patterns using a device similar to smartwatches. By gathering real evidence rather than relying on hersay, I could start to see if there is a correlating relationship between the drinking of the coffee later at night and sleep quality. Control is equally important because many other factors can affect sleep, such as stress, screen time, or individual sensitivity to caffeine. To minimize these influences, I could randomly assign participants two groups: one that drinks coffee at night and one that drinks caffeine-free beverage. By keeping other conditions the same, I would be able to isolate whether caffeine itself is causing the changes in sleep.Together, empiricism and control provide a structured way to test the accuracy of online claims. Instead of guessing, I would use systematic observation and carefully managed conditions to find evidence that either supports or challenges the claim.
<!-- RESPONSE-END -->

---

## Word Count & Range Check

```{r}
#| echo: false
#| message: false
#| warning: false
get_response_text <- function() {
  f <- knitr::current_input()
  if (is.null(f) || !file.exists(f)) return("")
  x <- readLines(f, warn = FALSE)
  # Find the lines that EXACTLY match the start/end markers
  s <- grep("^<!-- RESPONSE-START -->$", x)
  e <- grep("^<!-- RESPONSE-END -->$", x)
  if (length(s) != 1 || length(e) != 1 || e <= s) return("")
  paste(x[(s + 1L):(e - 1L)], collapse = "\n")
}
count_words <- function(txt) {
  # Remove code blocks and inline code before counting
  txt <- gsub("```[\\s\\S]*?```", " ", txt, perl = TRUE)
  txt <- gsub("`[^`]*`", " ", txt, perl = TRUE)
  # Keep letters, numbers, spaces, hyphens, and apostrophes
  txt <- gsub("[^\\p{L}\\p{N}\\s'-]", " ", txt, perl = TRUE)
  # Split by whitespace and count non-empty words
  words <- unlist(strsplit(txt, "\\s+", perl = TRUE))
  words <- words[nzchar(words)]
  length(words)
}
txt <- get_response_text()
n <- count_words(txt)
minw <- as.integer(params$word_min)
maxw <- as.integer(params$word_max)
in_range <- n >= minw && n <= maxw
cat(sprintf("**Word count:** %d  \n", n))
cat(sprintf("**Required range (%s):** %d–%d words  \n",
            toupper(params$course), minw, maxw))
cat(if (in_range) "**Status:** ✅ In range\n" else "**Status:** ❌ Out of range\n")
```
